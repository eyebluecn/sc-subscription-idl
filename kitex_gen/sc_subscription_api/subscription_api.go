// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package sc_subscription_api

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/eyebluecn/sc-subscription-idl/kitex_gen/sc_subscription_base"
)

type SubscriptionPageRequest struct {
	PageNum   int64                      `thrift:"pageNum,1" frugal:"1,default,i64" json:"pageNum"`
	PageSize  int64                      `thrift:"pageSize,2" frugal:"2,default,i64" json:"pageSize"`
	ReaderId  *int64                     `thrift:"readerId,3,optional" frugal:"3,optional,i64" json:"readerId,omitempty"`
	ColumnIds []int64                    `thrift:"columnIds,4,optional" frugal:"4,optional,list<i64>" json:"columnIds,omitempty"`
	OrderId   *int64                     `thrift:"orderId,5,optional" frugal:"5,optional,i64" json:"orderId,omitempty"`
	Status    *SubscriptionStatus        `thrift:"status,6,optional" frugal:"6,optional,SubscriptionStatus" json:"status,omitempty"`
	Base      *sc_subscription_base.Base `thrift:"base,255,optional" frugal:"255,optional,sc_subscription_base.Base" json:"base,omitempty"`
}

func NewSubscriptionPageRequest() *SubscriptionPageRequest {
	return &SubscriptionPageRequest{}
}

func (p *SubscriptionPageRequest) InitDefault() {
	*p = SubscriptionPageRequest{}
}

func (p *SubscriptionPageRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *SubscriptionPageRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var SubscriptionPageRequest_ReaderId_DEFAULT int64

func (p *SubscriptionPageRequest) GetReaderId() (v int64) {
	if !p.IsSetReaderId() {
		return SubscriptionPageRequest_ReaderId_DEFAULT
	}
	return *p.ReaderId
}

var SubscriptionPageRequest_ColumnIds_DEFAULT []int64

func (p *SubscriptionPageRequest) GetColumnIds() (v []int64) {
	if !p.IsSetColumnIds() {
		return SubscriptionPageRequest_ColumnIds_DEFAULT
	}
	return p.ColumnIds
}

var SubscriptionPageRequest_OrderId_DEFAULT int64

func (p *SubscriptionPageRequest) GetOrderId() (v int64) {
	if !p.IsSetOrderId() {
		return SubscriptionPageRequest_OrderId_DEFAULT
	}
	return *p.OrderId
}

var SubscriptionPageRequest_Status_DEFAULT SubscriptionStatus

func (p *SubscriptionPageRequest) GetStatus() (v SubscriptionStatus) {
	if !p.IsSetStatus() {
		return SubscriptionPageRequest_Status_DEFAULT
	}
	return *p.Status
}

var SubscriptionPageRequest_Base_DEFAULT *sc_subscription_base.Base

func (p *SubscriptionPageRequest) GetBase() (v *sc_subscription_base.Base) {
	if !p.IsSetBase() {
		return SubscriptionPageRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SubscriptionPageRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *SubscriptionPageRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *SubscriptionPageRequest) SetReaderId(val *int64) {
	p.ReaderId = val
}
func (p *SubscriptionPageRequest) SetColumnIds(val []int64) {
	p.ColumnIds = val
}
func (p *SubscriptionPageRequest) SetOrderId(val *int64) {
	p.OrderId = val
}
func (p *SubscriptionPageRequest) SetStatus(val *SubscriptionStatus) {
	p.Status = val
}
func (p *SubscriptionPageRequest) SetBase(val *sc_subscription_base.Base) {
	p.Base = val
}

var fieldIDToName_SubscriptionPageRequest = map[int16]string{
	1:   "pageNum",
	2:   "pageSize",
	3:   "readerId",
	4:   "columnIds",
	5:   "orderId",
	6:   "status",
	255: "base",
}

func (p *SubscriptionPageRequest) IsSetReaderId() bool {
	return p.ReaderId != nil
}

func (p *SubscriptionPageRequest) IsSetColumnIds() bool {
	return p.ColumnIds != nil
}

func (p *SubscriptionPageRequest) IsSetOrderId() bool {
	return p.OrderId != nil
}

func (p *SubscriptionPageRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *SubscriptionPageRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SubscriptionPageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubscriptionPageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubscriptionPageRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNum = _field
	return nil
}
func (p *SubscriptionPageRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *SubscriptionPageRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReaderId = _field
	return nil
}
func (p *SubscriptionPageRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnIds = _field
	return nil
}
func (p *SubscriptionPageRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OrderId = _field
	return nil
}
func (p *SubscriptionPageRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *SubscriptionStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := SubscriptionStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *SubscriptionPageRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_subscription_base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SubscriptionPageRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubscriptionPageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubscriptionPageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubscriptionPageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubscriptionPageRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReaderId() {
		if err = oprot.WriteFieldBegin("readerId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReaderId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SubscriptionPageRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnIds() {
		if err = oprot.WriteFieldBegin("columnIds", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ColumnIds)); err != nil {
			return err
		}
		for _, v := range p.ColumnIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SubscriptionPageRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderId() {
		if err = oprot.WriteFieldBegin("orderId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OrderId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SubscriptionPageRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SubscriptionPageRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubscriptionPageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubscriptionPageRequest(%+v)", *p)

}

func (p *SubscriptionPageRequest) DeepEqual(ano *SubscriptionPageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.ReaderId) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColumnIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.OrderId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Status) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SubscriptionPageRequest) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *SubscriptionPageRequest) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *SubscriptionPageRequest) Field3DeepEqual(src *int64) bool {

	if p.ReaderId == src {
		return true
	} else if p.ReaderId == nil || src == nil {
		return false
	}
	if *p.ReaderId != *src {
		return false
	}
	return true
}
func (p *SubscriptionPageRequest) Field4DeepEqual(src []int64) bool {

	if len(p.ColumnIds) != len(src) {
		return false
	}
	for i, v := range p.ColumnIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *SubscriptionPageRequest) Field5DeepEqual(src *int64) bool {

	if p.OrderId == src {
		return true
	} else if p.OrderId == nil || src == nil {
		return false
	}
	if *p.OrderId != *src {
		return false
	}
	return true
}
func (p *SubscriptionPageRequest) Field6DeepEqual(src *SubscriptionStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *SubscriptionPageRequest) Field255DeepEqual(src *sc_subscription_base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SubscriptionPageResponse struct {
	Data       []*SubscriptionDTO               `thrift:"data,1" frugal:"1,default,list<SubscriptionDTO>" json:"data"`
	Pagination *sc_subscription_base.Pagination `thrift:"pagination,2" frugal:"2,default,sc_subscription_base.Pagination" json:"pagination"`
	BaseResp   *sc_subscription_base.BaseResp   `thrift:"baseResp,255" frugal:"255,default,sc_subscription_base.BaseResp" json:"baseResp"`
}

func NewSubscriptionPageResponse() *SubscriptionPageResponse {
	return &SubscriptionPageResponse{}
}

func (p *SubscriptionPageResponse) InitDefault() {
	*p = SubscriptionPageResponse{}
}

func (p *SubscriptionPageResponse) GetData() (v []*SubscriptionDTO) {
	return p.Data
}

var SubscriptionPageResponse_Pagination_DEFAULT *sc_subscription_base.Pagination

func (p *SubscriptionPageResponse) GetPagination() (v *sc_subscription_base.Pagination) {
	if !p.IsSetPagination() {
		return SubscriptionPageResponse_Pagination_DEFAULT
	}
	return p.Pagination
}

var SubscriptionPageResponse_BaseResp_DEFAULT *sc_subscription_base.BaseResp

func (p *SubscriptionPageResponse) GetBaseResp() (v *sc_subscription_base.BaseResp) {
	if !p.IsSetBaseResp() {
		return SubscriptionPageResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SubscriptionPageResponse) SetData(val []*SubscriptionDTO) {
	p.Data = val
}
func (p *SubscriptionPageResponse) SetPagination(val *sc_subscription_base.Pagination) {
	p.Pagination = val
}
func (p *SubscriptionPageResponse) SetBaseResp(val *sc_subscription_base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SubscriptionPageResponse = map[int16]string{
	1:   "data",
	2:   "pagination",
	255: "baseResp",
}

func (p *SubscriptionPageResponse) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *SubscriptionPageResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SubscriptionPageResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubscriptionPageResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubscriptionPageResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SubscriptionDTO, 0, size)
	values := make([]SubscriptionDTO, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *SubscriptionPageResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := sc_subscription_base.NewPagination()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *SubscriptionPageResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_subscription_base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SubscriptionPageResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubscriptionPageResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubscriptionPageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubscriptionPageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubscriptionPageResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubscriptionPageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubscriptionPageResponse(%+v)", *p)

}

func (p *SubscriptionPageResponse) DeepEqual(ano *SubscriptionPageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SubscriptionPageResponse) Field1DeepEqual(src []*SubscriptionDTO) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *SubscriptionPageResponse) Field2DeepEqual(src *sc_subscription_base.Pagination) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubscriptionPageResponse) Field255DeepEqual(src *sc_subscription_base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
