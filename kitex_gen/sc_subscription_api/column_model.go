// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package sc_subscription_api

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/eyebluecn/sc-subscription-idl/kitex_gen/sc_bff_api"
	"strings"
)

type ColumnDTO struct {
	Id         int64        `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreateTime int64        `thrift:"createTime,2" frugal:"2,default,i64" json:"createTime"`
	UpdateTime int64        `thrift:"updateTime,3" frugal:"3,default,i64" json:"updateTime"`
	Name       string       `thrift:"name,4" frugal:"4,default,string" json:"name"`
	AuthorId   int64        `thrift:"authorId,5" frugal:"5,default,i64" json:"authorId"`
	Status     ColumnStatus `thrift:"status,6" frugal:"6,default,ColumnStatus" json:"status"`
}

func NewColumnDTO() *ColumnDTO {
	return &ColumnDTO{}
}

func (p *ColumnDTO) InitDefault() {
	*p = ColumnDTO{}
}

func (p *ColumnDTO) GetId() (v int64) {
	return p.Id
}

func (p *ColumnDTO) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *ColumnDTO) GetUpdateTime() (v int64) {
	return p.UpdateTime
}

func (p *ColumnDTO) GetName() (v string) {
	return p.Name
}

func (p *ColumnDTO) GetAuthorId() (v int64) {
	return p.AuthorId
}

func (p *ColumnDTO) GetStatus() (v ColumnStatus) {
	return p.Status
}
func (p *ColumnDTO) SetId(val int64) {
	p.Id = val
}
func (p *ColumnDTO) SetCreateTime(val int64) {
	p.CreateTime = val
}
func (p *ColumnDTO) SetUpdateTime(val int64) {
	p.UpdateTime = val
}
func (p *ColumnDTO) SetName(val string) {
	p.Name = val
}
func (p *ColumnDTO) SetAuthorId(val int64) {
	p.AuthorId = val
}
func (p *ColumnDTO) SetStatus(val ColumnStatus) {
	p.Status = val
}

var fieldIDToName_ColumnDTO = map[int16]string{
	1: "id",
	2: "createTime",
	3: "updateTime",
	4: "name",
	5: "authorId",
	6: "status",
}

func (p *ColumnDTO) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnDTO[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnDTO) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ColumnDTO) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreateTime = _field
	return nil
}
func (p *ColumnDTO) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdateTime = _field
	return nil
}
func (p *ColumnDTO) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ColumnDTO) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AuthorId = _field
	return nil
}
func (p *ColumnDTO) ReadField6(iprot thrift.TProtocol) error {

	var _field ColumnStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = ColumnStatus(v)
	}
	p.Status = _field
	return nil
}

func (p *ColumnDTO) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnDTO"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnDTO) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnDTO) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createTime", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ColumnDTO) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updateTime", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ColumnDTO) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ColumnDTO) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("authorId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.AuthorId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ColumnDTO) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ColumnDTO) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnDTO(%+v)", *p)

}

func (p *ColumnDTO) DeepEqual(ano *ColumnDTO) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.AuthorId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ColumnDTO) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ColumnDTO) Field2DeepEqual(src int64) bool {

	if p.CreateTime != src {
		return false
	}
	return true
}
func (p *ColumnDTO) Field3DeepEqual(src int64) bool {

	if p.UpdateTime != src {
		return false
	}
	return true
}
func (p *ColumnDTO) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ColumnDTO) Field5DeepEqual(src int64) bool {

	if p.AuthorId != src {
		return false
	}
	return true
}
func (p *ColumnDTO) Field6DeepEqual(src ColumnStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}

type RichColumnDTO struct {
	Column       *ColumnDTO                 `thrift:"column,1" frugal:"1,default,ColumnDTO" json:"column"`
	Author       *sc_bff_api.AuthorDTO      `thrift:"author,2" frugal:"2,default,sc_bff_api.AuthorDTO" json:"author"`
	ColumnQuote  *sc_bff_api.ColumnQuoteDTO `thrift:"columnQuote,3" frugal:"3,default,sc_bff_api.ColumnQuoteDTO" json:"columnQuote"`
	Subscription *SubscriptionDTO           `thrift:"subscription,4" frugal:"4,default,SubscriptionDTO" json:"subscription"`
}

func NewRichColumnDTO() *RichColumnDTO {
	return &RichColumnDTO{}
}

func (p *RichColumnDTO) InitDefault() {
	*p = RichColumnDTO{}
}

var RichColumnDTO_Column_DEFAULT *ColumnDTO

func (p *RichColumnDTO) GetColumn() (v *ColumnDTO) {
	if !p.IsSetColumn() {
		return RichColumnDTO_Column_DEFAULT
	}
	return p.Column
}

var RichColumnDTO_Author_DEFAULT *sc_bff_api.AuthorDTO

func (p *RichColumnDTO) GetAuthor() (v *sc_bff_api.AuthorDTO) {
	if !p.IsSetAuthor() {
		return RichColumnDTO_Author_DEFAULT
	}
	return p.Author
}

var RichColumnDTO_ColumnQuote_DEFAULT *sc_bff_api.ColumnQuoteDTO

func (p *RichColumnDTO) GetColumnQuote() (v *sc_bff_api.ColumnQuoteDTO) {
	if !p.IsSetColumnQuote() {
		return RichColumnDTO_ColumnQuote_DEFAULT
	}
	return p.ColumnQuote
}

var RichColumnDTO_Subscription_DEFAULT *SubscriptionDTO

func (p *RichColumnDTO) GetSubscription() (v *SubscriptionDTO) {
	if !p.IsSetSubscription() {
		return RichColumnDTO_Subscription_DEFAULT
	}
	return p.Subscription
}
func (p *RichColumnDTO) SetColumn(val *ColumnDTO) {
	p.Column = val
}
func (p *RichColumnDTO) SetAuthor(val *sc_bff_api.AuthorDTO) {
	p.Author = val
}
func (p *RichColumnDTO) SetColumnQuote(val *sc_bff_api.ColumnQuoteDTO) {
	p.ColumnQuote = val
}
func (p *RichColumnDTO) SetSubscription(val *SubscriptionDTO) {
	p.Subscription = val
}

var fieldIDToName_RichColumnDTO = map[int16]string{
	1: "column",
	2: "author",
	3: "columnQuote",
	4: "subscription",
}

func (p *RichColumnDTO) IsSetColumn() bool {
	return p.Column != nil
}

func (p *RichColumnDTO) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *RichColumnDTO) IsSetColumnQuote() bool {
	return p.ColumnQuote != nil
}

func (p *RichColumnDTO) IsSetSubscription() bool {
	return p.Subscription != nil
}

func (p *RichColumnDTO) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RichColumnDTO[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RichColumnDTO) ReadField1(iprot thrift.TProtocol) error {
	_field := NewColumnDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Column = _field
	return nil
}
func (p *RichColumnDTO) ReadField2(iprot thrift.TProtocol) error {
	_field := sc_bff_api.NewAuthorDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Author = _field
	return nil
}
func (p *RichColumnDTO) ReadField3(iprot thrift.TProtocol) error {
	_field := sc_bff_api.NewColumnQuoteDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ColumnQuote = _field
	return nil
}
func (p *RichColumnDTO) ReadField4(iprot thrift.TProtocol) error {
	_field := NewSubscriptionDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Subscription = _field
	return nil
}

func (p *RichColumnDTO) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RichColumnDTO"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RichColumnDTO) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Column.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RichColumnDTO) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("author", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Author.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RichColumnDTO) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnQuote", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ColumnQuote.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RichColumnDTO) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("subscription", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Subscription.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RichColumnDTO) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RichColumnDTO(%+v)", *p)

}

func (p *RichColumnDTO) DeepEqual(ano *RichColumnDTO) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Column) {
		return false
	}
	if !p.Field2DeepEqual(ano.Author) {
		return false
	}
	if !p.Field3DeepEqual(ano.ColumnQuote) {
		return false
	}
	if !p.Field4DeepEqual(ano.Subscription) {
		return false
	}
	return true
}

func (p *RichColumnDTO) Field1DeepEqual(src *ColumnDTO) bool {

	if !p.Column.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RichColumnDTO) Field2DeepEqual(src *sc_bff_api.AuthorDTO) bool {

	if !p.Author.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RichColumnDTO) Field3DeepEqual(src *sc_bff_api.ColumnQuoteDTO) bool {

	if !p.ColumnQuote.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RichColumnDTO) Field4DeepEqual(src *SubscriptionDTO) bool {

	if !p.Subscription.DeepEqual(src) {
		return false
	}
	return true
}
