// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package subscription

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type SubscriptionDTO struct {
	Id         int64              `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreateTime int64              `thrift:"createTime,2" frugal:"2,default,i64" json:"createTime"`
	UpdateTime int64              `thrift:"updateTime,3" frugal:"3,default,i64" json:"updateTime"`
	ReaderId   int64              `thrift:"readerId,4" frugal:"4,default,i64" json:"readerId"`
	ColumnId   int64              `thrift:"columnId,5" frugal:"5,default,i64" json:"columnId"`
	OrderId    int64              `thrift:"orderId,6" frugal:"6,default,i64" json:"orderId"`
	Status     SubscriptionStatus `thrift:"status,7" frugal:"7,default,SubscriptionStatus" json:"status"`
}

func NewSubscriptionDTO() *SubscriptionDTO {
	return &SubscriptionDTO{}
}

func (p *SubscriptionDTO) InitDefault() {
	*p = SubscriptionDTO{}
}

func (p *SubscriptionDTO) GetId() (v int64) {
	return p.Id
}

func (p *SubscriptionDTO) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *SubscriptionDTO) GetUpdateTime() (v int64) {
	return p.UpdateTime
}

func (p *SubscriptionDTO) GetReaderId() (v int64) {
	return p.ReaderId
}

func (p *SubscriptionDTO) GetColumnId() (v int64) {
	return p.ColumnId
}

func (p *SubscriptionDTO) GetOrderId() (v int64) {
	return p.OrderId
}

func (p *SubscriptionDTO) GetStatus() (v SubscriptionStatus) {
	return p.Status
}
func (p *SubscriptionDTO) SetId(val int64) {
	p.Id = val
}
func (p *SubscriptionDTO) SetCreateTime(val int64) {
	p.CreateTime = val
}
func (p *SubscriptionDTO) SetUpdateTime(val int64) {
	p.UpdateTime = val
}
func (p *SubscriptionDTO) SetReaderId(val int64) {
	p.ReaderId = val
}
func (p *SubscriptionDTO) SetColumnId(val int64) {
	p.ColumnId = val
}
func (p *SubscriptionDTO) SetOrderId(val int64) {
	p.OrderId = val
}
func (p *SubscriptionDTO) SetStatus(val SubscriptionStatus) {
	p.Status = val
}

var fieldIDToName_SubscriptionDTO = map[int16]string{
	1: "id",
	2: "createTime",
	3: "updateTime",
	4: "readerId",
	5: "columnId",
	6: "orderId",
	7: "status",
}

func (p *SubscriptionDTO) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubscriptionDTO[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubscriptionDTO) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *SubscriptionDTO) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreateTime = _field
	return nil
}
func (p *SubscriptionDTO) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdateTime = _field
	return nil
}
func (p *SubscriptionDTO) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReaderId = _field
	return nil
}
func (p *SubscriptionDTO) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnId = _field
	return nil
}
func (p *SubscriptionDTO) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderId = _field
	return nil
}
func (p *SubscriptionDTO) ReadField7(iprot thrift.TProtocol) error {

	var _field SubscriptionStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = SubscriptionStatus(v)
	}
	p.Status = _field
	return nil
}

func (p *SubscriptionDTO) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubscriptionDTO"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubscriptionDTO) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubscriptionDTO) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createTime", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubscriptionDTO) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updateTime", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SubscriptionDTO) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("readerId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ReaderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SubscriptionDTO) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ColumnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SubscriptionDTO) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderId", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SubscriptionDTO) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SubscriptionDTO) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubscriptionDTO(%+v)", *p)

}

func (p *SubscriptionDTO) DeepEqual(ano *SubscriptionDTO) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.ReaderId) {
		return false
	}
	if !p.Field5DeepEqual(ano.ColumnId) {
		return false
	}
	if !p.Field6DeepEqual(ano.OrderId) {
		return false
	}
	if !p.Field7DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *SubscriptionDTO) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *SubscriptionDTO) Field2DeepEqual(src int64) bool {

	if p.CreateTime != src {
		return false
	}
	return true
}
func (p *SubscriptionDTO) Field3DeepEqual(src int64) bool {

	if p.UpdateTime != src {
		return false
	}
	return true
}
func (p *SubscriptionDTO) Field4DeepEqual(src int64) bool {

	if p.ReaderId != src {
		return false
	}
	return true
}
func (p *SubscriptionDTO) Field5DeepEqual(src int64) bool {

	if p.ColumnId != src {
		return false
	}
	return true
}
func (p *SubscriptionDTO) Field6DeepEqual(src int64) bool {

	if p.OrderId != src {
		return false
	}
	return true
}
func (p *SubscriptionDTO) Field7DeepEqual(src SubscriptionStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
